/**
* GRAMÁTICA
* 
* REGRAS LÉXICAS:
* <OP>-> '+' | '-' | '*' | '/' | '=' | '!=' | '>' | '<' | '>=' | '<='
* <ID>-> <LETTER> <LD>*
* <LD>-> <LETTER> | <DIGIT>
* <NUMBER>-> <DIGIT>+
* <LETTER>-> 'a' | 'b' | ... | 'z'
* <DIGIT>-> '0' | '1' | ... | '9'
* 
* REGRAS SINTÁTICAS:
* <PROGRAM>-> 'program' '{' <STATEMENT>* '}'
* <STATEMENT>-> <ASSIGNMENT> | <CONDITIONAL> | <LOOP>
* <ASSIGNMENT>-> <ID> '=' <EXPR> ';'
* <CONDITIONAL>-> 'if' <EXPR> '{' <STATEMENT>+ '}' | 
* 				  'if' <EXPR> '{' <STATEMENT>+ '}' 'else' '{' <STATEMENT>+ '}'
* <LOOP>-> 'while' <EXPR> '{' <STATEMENT>+ '}'
* <EXPR>-> <ID> | <NUMBER> | '(' <EXPR> ')' | <EXPR> <OP> <EXPR>
*/

options {
	STATIC = false;
	DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Compilador)
package compilador.parser;

import java.io.*;
import java.util.*;
import static javax.swing.JOptionPane.*;

public class Compilador {

	public void processa() {
		Token token = new Token();
		String tokenName;
		do {
	  		token = getNextToken();
	  		tokenName = tokenImage[token.kind];
		} while(token.kind != 0);
	}

	/*
	public static void main(String[] args, String s) {
		try {
		} catch(Error error) {
			System.err.println(error.getMessage());
		}
	}
	*/
	
}
PARSER_END(Compilador)

TOKEN_MGR_DECLS: {
  
	int qtdLexErrors = 0;
	int getLexErrors() {
		return qtdLexErrors;
	}

	List<String> tokenList = new ArrayList<String>();
	public void addImg(String type, StringBuilder image) {
		tokenList.add(type + ": " + image.toString());
		System.out.println(type + ": " + image.toString());
	}
}

SKIP: {
	" " | "\r" | "\t" | "\n"
}

// KEYWORDS
TOKEN: {
	<PROGRAM: "program"> {
		addImg("Keyword <PROGRAM>", image);
	}

	| <WHILE: "while"> {
		addImg("Keyword <LOOP>", image);
	}

	| <IF: "if"> {
		addImg("Keyword <CONDITIONAL>", image);
	}

	| <ELSE: "else"> {
		addImg("Keyword <CONDITIONAL>", image);
	}
}

// SEPARATORS
TOKEN: {
	<CA: "{"> {
		addImg("Scope Opening", image);
	}

	| <CF: "}"> {
		addImg("Scope Closing", image);
	}

	| <PA: "("> {
		addImg("Parentesis Opening", image);
	}

	| <PF: ")"> {
		addImg("Parentesis Closing", image);
	}

	| <PV: ";"> {
		addImg("Ponto-e-vírgula", image);
	}
}

// OPERATORS
TOKEN: {
	<OP:
		"+"
		| "-"
		| "*"
		| "/"
		| "=="
		| "!="
		| "<"
		| ">"
		| "<="
		| ">="> {
		  addImg("Arithmetic or Comparing Operator", image);
	}
	
	| <ATTR: "="> {
		addImg("Assignment Operator", image);
	}
}

// SYMBOLS
TOKEN: {
	<NUMBER: (["0"-"9"])+> {
		addImg("Valor", image);
	}
	
	| <IDENTIFIER: ["a"-"z"] (["a"-"z", "0"-"9"])*> {
		addImg("Variável", image);
	}
}

void INIT(): {} {
	program()
}

void program(): {} {
  	<PROGRAM> <CA> (statement())+ <CF>
}

void statement(): {} {  	assignment() | conditional() | loop()
}

void assignment(): {} {
	<IDENTIFIER> <ATTR> [expression()] <PV>
}

void expression(): {} {
	(term() (<OP> term())*)
}

void term(): {} {
	(factor() (LOOKAHEAD(2) <OP> factor())*)
}

void factor(): {} {
	(<IDENTIFIER>  | <NUMBER> | (<PA> expression() <PF>))
}

void conditional(): {} {
	<IF> expression() <CA> (statement())* <CF> (LOOKAHEAD(1) <ELSE> <CA> (statement())* <CF>)?
}

void loop(): {} {
	<WHILE> expression() <CA> (statement())* <CF>
}